generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email             String             @unique
  firstName         String
  lastName          String
  password          String
  contactNumber     String
  avatar            String?
  gender            Gender
  createdAt         DateTime           @default(now())
  role              Role               @default(user)
  isBlock           Boolean            @default(false)
  otp               Int?
  otp_expire        DateTime?
  status            Status             @default(pending)
  sessionToken      String?
  assignedSchedules AssignedSchedule[]
  CourseTeacher     CourseTeacher[]
  Schedules         Schedules[]
  UserActivity      UserActivity[]
  ScheduleRequest   ScheduleRequest[]
}

enum Gender {
  male
  female
}

enum Role {
  user
  teacher
  admin
}

enum Status {
  active
  deactive
  pending
}

model UserActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  activity  String
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Schedules {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime
  startTime         DateTime
  endTime           DateTime
  venue             String
  duration          Int
  description       String?
  courseId          String             @db.ObjectId
  teacherId         String             @db.ObjectId
  course            Course             @relation(fields: [courseId], references: [id])
  teacher           User               @relation(fields: [teacherId], references: [id])
  assignedExaminers AssignedSchedule[]
}

model AssignedSchedule {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  scheduleId String @db.ObjectId

  user     User      @relation(fields: [userId], references: [id])
  schedule Schedules @relation(fields: [scheduleId], references: [id])
}

model Notification {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  message       String
  recipientType RecipientType
  createdAt     DateTime      @default(now())
}

enum RecipientType {
  student
  teacher
  all
}

model Course {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  teachers        CourseTeacher[]
  Schedules       Schedules[]
  ScheduleRequest ScheduleRequest[]
}

model CourseTeacher {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String @db.ObjectId
  teacherId String @db.ObjectId

  course  Course @relation(fields: [courseId], references: [id])
  teacher User   @relation(fields: [teacherId], references: [id])
}

model ScheduleRequest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  teacherId   String        @db.ObjectId
  courseId    String        @db.ObjectId
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  venue       String
  duration    Int
  description String?
  status      RequestStatus @default(pending)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  teacher User   @relation(fields: [teacherId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])
}

enum RequestStatus {
  pending
  approved
  rejected
}
